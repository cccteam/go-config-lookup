// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/AscendiumApps/cpp-aggregator-service/config/awslookuper (interfaces: AwsSsmAPI)

// Package awslookuper is a generated GoMock package.
package awslookuper

import (
	context "context"
	reflect "reflect"

	ssm "github.com/aws/aws-sdk-go-v2/service/ssm"
	gomock "github.com/golang/mock/gomock"
)

// MockAwsSsmAPI is a mock of AwsSsmAPI interface.
type MockAwsSsmAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAwsSsmAPIMockRecorder
}

// MockAwsSsmAPIMockRecorder is the mock recorder for MockAwsSsmAPI.
type MockAwsSsmAPIMockRecorder struct {
	mock *MockAwsSsmAPI
}

// NewMockAwsSsmAPI creates a new mock instance.
func NewMockAwsSsmAPI(ctrl *gomock.Controller) *MockAwsSsmAPI {
	mock := &MockAwsSsmAPI{ctrl: ctrl}
	mock.recorder = &MockAwsSsmAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAwsSsmAPI) EXPECT() *MockAwsSsmAPIMockRecorder {
	return m.recorder
}

// GetParameter mocks base method.
func (m *MockAwsSsmAPI) GetParameter(arg0 context.Context, arg1 *ssm.GetParameterInput, arg2 ...func(*ssm.Options)) (*ssm.GetParameterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetParameter", varargs...)
	ret0, _ := ret[0].(*ssm.GetParameterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParameter indicates an expected call of GetParameter.
func (mr *MockAwsSsmAPIMockRecorder) GetParameter(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParameter", reflect.TypeOf((*MockAwsSsmAPI)(nil).GetParameter), varargs...)
}
